name: CI/CD Pipeline for Golang HA Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: gcr.io
  IMAGE_NAME: ${{ github.repository }}
  PRIMARY_REGION: ${{ vars.PRIMARY_REGION || 'europe-west1' }}
  SECONDARY_REGION: ${{ vars.SECONDARY_REGION || 'europe-west3' }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        cd application/golang-server
        go mod download
        go mod verify

    - name: Run tests
      run: |
        cd application/golang-server
        go test -v ./...

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'application/golang-server'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/golang-ha-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./application/golang-server
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-canary:
    name: Deploy Canary
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials golang-ha-primary --region ${{ env.PRIMARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}
        gcloud container clusters get-credentials golang-ha-secondary --region ${{ env.SECONDARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy canary to primary cluster
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl apply -f application/k8s-manifests/canary-deployment.yaml
        kubectl apply -f application/k8s-manifests/canary-service.yaml

    - name: Wait for canary deployment
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl rollout status deployment/golang-app-canary --timeout=300s

    - name: Run canary tests
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        ./application/scripts/test-canary.sh

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-canary
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials golang-ha-primary --region ${{ env.PRIMARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}
        gcloud container clusters get-credentials golang-ha-secondary --region ${{ env.SECONDARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy to primary cluster
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl apply -f application/k8s-manifests/deployment.yaml
        kubectl apply -f application/k8s-manifests/service.yaml
        kubectl apply -f application/k8s-manifests/ingress.yaml

    - name: Deploy to secondary cluster
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.SECONDARY_REGION }}_golang-ha-secondary
        kubectl apply -f application/k8s-manifests/deployment.yaml
        kubectl apply -f application/k8s-manifests/service.yaml

    - name: Wait for production deployment
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl rollout status deployment/golang-app --timeout=300s
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.SECONDARY_REGION }}_golang-ha-secondary
        kubectl rollout status deployment/golang-app --timeout=300s

    - name: Run production tests
      run: |
        ./application/scripts/test-production.sh

    - name: Clean up canary
      if: success()
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl delete deployment golang-app-canary --ignore-not-found=true
        kubectl delete service golang-app-canary --ignore-not-found=true

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials golang-ha-primary --region ${{ env.PRIMARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}
        gcloud container clusters get-credentials golang-ha-secondary --region ${{ env.SECONDARY_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Rollback primary cluster
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.PRIMARY_REGION }}_golang-ha-primary
        kubectl rollout undo deployment/golang-app

    - name: Rollback secondary cluster
      run: |
        kubectl config use-context gke_${{ secrets.GCP_PROJECT_ID }}_${{ env.SECONDARY_REGION }}_golang-ha-secondary
        kubectl rollout undo deployment/golang-app

    - name: Notify rollback
      run: |
        echo "ðŸš¨ Production deployment failed, rollback completed"
        # Add notification logic here (Slack, email, etc.)

# ArgoCD Project for Golang HA Server
# This provides RBAC and resource management for the GitOps applications
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: golang-ha-project
  namespace: argocd
  labels:
    project: golang-ha
    team: platform-engineering
spec:
  description: "GitOps project for Golang HA Server infrastructure and applications"
  
  # Source repositories that apps in this project can deploy from
  sourceRepos:
  - https://github.com/Cris245/Terraform-k8s.git
  - https://github.com/Cris245/Terraform-k8s  # Support both .git and without
  
  # Destination clusters and namespaces
  destinations:
  - namespace: golang-app
    server: https://kubernetes.default.svc
  - namespace: golang-app-privileged
    server: https://kubernetes.default.svc
  - namespace: istio-system
    server: https://kubernetes.default.svc
  - namespace: kube-system
    server: https://kubernetes.default.svc
  - namespace: monitoring
    server: https://kubernetes.default.svc
  - namespace: vault
    server: https://kubernetes.default.svc
    
  # Cluster resource whitelist - what can be deployed
  clusterResourceWhitelist:
  - group: ""
    kind: Namespace
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  - group: networking.k8s.io
    kind: NetworkPolicy
  - group: policy
    kind: PodSecurityPolicy
  - group: admissionregistration.k8s.io
    kind: ValidatingAdmissionWebhook
  - group: admissionregistration.k8s.io
    kind: MutatingAdmissionWebhook
  - group: apiextensions.k8s.io
    kind: CustomResourceDefinition
    
  # Namespace resource whitelist - what can be deployed in namespaces
  namespaceResourceWhitelist:
  - group: ""
    kind: ConfigMap
  - group: ""
    kind: Secret
  - group: ""
    kind: Service
  - group: ""
    kind: ServiceAccount
  - group: ""
    kind: PersistentVolumeClaim
  - group: apps
    kind: Deployment
  - group: apps
    kind: ReplicaSet
  - group: apps
    kind: StatefulSet
  - group: apps
    kind: DaemonSet
  - group: batch
    kind: Job
  - group: batch
    kind: CronJob
  - group: networking.k8s.io
    kind: Ingress
  - group: networking.k8s.io
    kind: NetworkPolicy
  - group: autoscaling
    kind: HorizontalPodAutoscaler
  - group: policy
    kind: PodDisruptionBudget
  - group: networking.istio.io
    kind: Gateway
  - group: networking.istio.io
    kind: VirtualService
  - group: networking.istio.io
    kind: DestinationRule
  - group: networking.istio.io
    kind: ServiceEntry
  - group: security.istio.io
    kind: PeerAuthentication
  - group: security.istio.io
    kind: AuthorizationPolicy
  - group: monitoring.coreos.com
    kind: ServiceMonitor
  - group: monitoring.coreos.com
    kind: PrometheusRule
  - group: cloud.google.com
    kind: BackendConfig
  - group: networking.gke.io
    kind: FrontendConfig
  - group: networking.gke.io
    kind: ManagedCertificate
    
  # Role policies - RBAC for project access
  roles:
  # Platform engineers have full access
  - name: platform-engineer
    description: "Full access for platform engineering team"
    policies:
    - p, proj:golang-ha-project:platform-engineer, applications, *, golang-ha-project/*, allow
    - p, proj:golang-ha-project:platform-engineer, clusters, *, *, allow
    - p, proj:golang-ha-project:platform-engineer, repositories, *, *, allow
    groups:
    - platform-engineering
    
  # Developers have read-only access
  - name: developer
    description: "Read-only access for developers"
    policies:
    - p, proj:golang-ha-project:developer, applications, get, golang-ha-project/*, allow
    - p, proj:golang-ha-project:developer, applications, sync, golang-ha-project/golang-ha-app, allow
    - p, proj:golang-ha-project:developer, applications, sync, golang-ha-project/golang-ha-istio, allow
    groups:
    - developers
    
  # SRE team has operational access
  - name: sre
    description: "Operational access for SRE team"
    policies:
    - p, proj:golang-ha-project:sre, applications, *, golang-ha-project/*, allow
    - p, proj:golang-ha-project:sre, clusters, get, *, allow
    - p, proj:golang-ha-project:sre, repositories, get, *, allow
    groups:
    - sre-team
    
  # Sync windows for controlled deployments
  syncWindows:
  - kind: allow
    schedule: "0 9-17 * * MON-FRI"  # Business hours Mon-Fri
    duration: 8h
    applications:
    - golang-ha-app
    - golang-ha-istio
    manualSync: true
    
  - kind: deny
    schedule: "0 0-6 * * *"  # Deny overnight deployments
    duration: 6h
    applications:
    - golang-ha-security
    - "*"
    manualSync: false
    
  # Signature verification (optional, for enhanced security)
  signatureKeys:
  - keyID: 4AE2D10D  # Example GPG key ID for commit signature verification
    
  # Orphaned resource monitoring
  orphanedResources:
    warn: true
    ignore:
    - group: ""
      kind: Secret
      name: "istio-*"  # Ignore Istio auto-generated secrets
    - group: ""
      kind: ConfigMap
      name: "kube-root-ca.crt"  # Ignore system ConfigMaps

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: golang-app-waf-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "golang-ha-global-ip"
    networking.gke.io/v1beta1.FrontendConfig: "golang-app-frontend-config"
    networking.gke.io/v1beta1.BackendConfig: "golang-app-backend-config"
    cloud.google.com/security-policy: "golang-app-security-policy"
spec:
  tls:
  - hosts:
    - golang-ha.example.com
    secretName: golang-app-tls
  rules:
  - host: golang-ha.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: golang-app-service
            port:
              number: 80
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: golang-app-backend-config
  namespace: default
spec:
  securityPolicy:
    name: golang-app-security-policy
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
    port: 8080
  logging:
    enable: true
    sampleRate: 1.0
---
apiVersion: cloud.google.com/v1
kind: FrontendConfig
metadata:
  name: golang-app-frontend-config
  namespace: default
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: MOVED_PERMANENTLY_DEFAULT
  sslPolicy: golang-app-ssl-policy
---
# Cloud Armor Security Policy
resource "google_compute_security_policy" "golang_app_policy" {
  name = "golang-app-security-policy"
  project = var.project_id

  # Rate limiting rule
  rule {
    action   = "rate-based-ban"
    priority = "1000"
    match {
      versioned_expr = "SRC_IPS_V1"
      config {
        src_ip_ranges = ["*"]
      }
    }
    rate_limit_options {
      rate_limit_threshold {
        count        = 100
        interval_sec = 60
      }
      conform_action   = "allow"
      exceed_action    = "deny(429)"
      enforce_on_key   = "IP"
    }
  }

  # SQL injection protection
  rule {
    action   = "deny(403)"
    priority = "2000"
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('sqli-stable')"
      }
    }
    description = "SQL injection protection"
  }

  # XSS protection
  rule {
    action   = "deny(403)"
    priority = "2001"
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('xss-stable')"
      }
    }
    description = "XSS protection"
  }

  # LFI protection
  rule {
    action   = "deny(403)"
    priority = "2002"
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('lfi-stable')"
      }
    }
    description = "Local file inclusion protection"
  }

  # RCE protection
  rule {
    action   = "deny(403)"
    priority = "2003"
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('rce-stable')"
      }
    }
    description = "Remote code execution protection"
  }

  # Method enforcement
  rule {
    action   = "deny(405)"
    priority = "3000"
    match {
      expr {
        expression = "request.method != 'GET' && request.method != 'POST' && request.method != 'HEAD'"
      }
    }
    description = "Allow only GET, POST, and HEAD methods"
  }

  # User agent blocking
  rule {
    action   = "deny(403)"
    priority = "4000"
    match {
      expr {
        expression = "request.headers['user-agent'].contains('bot') || request.headers['user-agent'].contains('crawler')"
      }
    }
    description = "Block bots and crawlers"
  }

  # Default rule
  rule {
    action   = "allow"
    priority = "2147483647"
    match {
      versioned_expr = "SRC_IPS_V1"
      config {
        src_ip_ranges = ["*"]
      }
    }
    description = "Default rule, higher priority overrides it"
  }
}

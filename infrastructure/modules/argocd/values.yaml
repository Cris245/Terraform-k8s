# ArgoCD Helm Values Template
# This file is processed by Terraform templatefile function

global:
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    fsGroup: 999

# Server configuration
server:
  name: server
  replicas: 1  # Keep it simple
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/metrics"
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus
  
  config:
    url: https://${domain_name}
    application.instanceLabelKey: argocd.argoproj.io/instance
    
    # OIDC configuration placeholder
    oidc.config: |
      name: Google
      issuer: https://accounts.google.com
      clientId: $oidc.google.clientId
      clientSecret: $oidc.google.clientSecret
      requestedScopes: ["openid", "profile", "email", "groups"]
      requestedIDTokenClaims: {"groups": {"essential": true}}
    
    # Repository configuration
    repositories: |
      - url: ${git_repo_url}
        name: golang-ha-repo
        type: git
        
    # RBAC configuration
    policy.default: role:readonly
    policy.csv: |
      p, role:admin, applications, *, */*, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      g, argocd-admins, role:admin
      
      p, role:developer, applications, get, */*, allow
      p, role:developer, applications, sync, */golang-ha-*, allow
      g, developers, role:developer
      
      p, role:sre, applications, *, */*, allow
      p, role:sre, clusters, get, *, allow
      g, sre-team, role:sre

# Application Controller
controller:
  name: application-controller
  replicas: 1  # Single instance
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus
  
  args:
    statusProcessors: "20"
    operationProcessors: "10"
    appResyncPeriod: "180"
    selfHealTimeout: "5"
    repoServerTimeoutSeconds: "60"

# Repository Server
repoServer:
  name: repo-server
  replicas: 1  # Single instance
    
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8084"
        prometheus.io/path: "/metrics"
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus

# Redis configuration - Simple single instance
redis:
  enabled: true  # Single Redis instance for simplicity
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Redis HA disabled for simplicity
redis-ha:
  enabled: false

# ApplicationSet controller
applicationSet:
  enabled: true
  replicaCount: 1  # Single instance
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus

# Notifications controller
notifications:
  enabled: true
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
        prometheus.io/path: "/metrics"
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus
  
  # Notification templates
  templates:
    template.app-deployed: |
      email:
        subject: Application {{.app.metadata.name}} is now running new version.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of {{.app.status.sync.revision}}.
    template.app-health-degraded: |
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    template.app-sync-failed: |
      email:
        subject: Application {{.app.metadata.name}} sync is failed.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is failed.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}

# Dex (disabled in favor of external OIDC)
dex:
  enabled: false

# Additional configurations
configs:
  # Git repository credentials (if needed)
  repositories:
    golang-ha-repo:
      url: ${git_repo_url}
      name: golang-ha-repo
      type: git
      
  # Known hosts for Git repositories
  ssh:
    knownHosts: |
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QLPgzgDu2Q1oPW2lFc+2Y4r1p5wK6z3xVjbG7GQ/C+0hOAGj2aUEA+X6Vl9vJ7XgqMD2q

# Ingress configuration (when using Istio)
%{ if enable_ingress }
ingress:
  enabled: true
  ingressClassName: istio
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - ${domain_name}
  tls:
    - secretName: argocd-server-tls
      hosts:
        - ${domain_name}
%{ endif }
